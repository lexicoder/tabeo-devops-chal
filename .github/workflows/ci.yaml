name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_NAME: spacetrouble
  CLUSTER_NAME: tabeo-devops-chal
  GCP_REGION: europe-west3

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      
      - name: Run tests
        run: go test -tags=test -v ./...

  docker:
    strategy:
      matrix:
        component: ["booking-server", "write-hello", "migrate"]
    name: Build and push docker image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}-${{ matrix.component }}

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.component }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

  helm:
    name: Test helm chart
    runs-on: ubuntu-latest
    concurrency: helm-charts
    steps:
      - uses: actions/checkout@v4
        
      - name: Set chart version
        run: |
          cd charts
          sed -i 's/version: 0.1.0/version: 0.1.'$GITHUB_RUN_NUMBER'/g' */Chart.yaml
      
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi

      - name: Run chart-testing (lint)
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        uses: helm/kind-action@v1
      
      - name: Install postgres in kind cluster
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm upgrade --install --set "auth.password=spacetrouble" --set "auth.database=spacetrouble" --set "auth.username=spacetrouble" --wait db bitnami/postgresql

      - name: Install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager --set installCRDs=true --wait

      - name: Run chart-testing (install)
        run: ct install --all

  terraform:
    name: Apply terraform config
    runs-on: ubuntu-latest
    concurrency: terraform
    defaults:
      run:
        working-directory: ./terraform
    env:
      TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
      TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}

    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      database_ip: ${{ steps.get-db-ip.outputs.database_ip }}
    steps:
      - uses: actions/checkout@v4
        
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
      
      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        with:
          github_token: ${{ github.token }}

      - id: auth-gcp
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          install_components: 'alpha'
      
      - name: Test GCP auth
        run: gcloud storage ls gs://$CLUSTER_NAME-terraform/

      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
  
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    concurrency: deploy
    needs: [docker, helm, terraform]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4

      - id: auth-gcp
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          install_components: 'alpha'

      - name: Get database IP
        id: get-database-ip
        run: |
          cd terraform
          terraform init
          echo "::set-output name=DATABASE_IP::$(terraform output -raw database_ip)"

      - uses: azure/setup-helm@v3
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}
      
      - name: Install nginx ingress
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install nginx ingress-nginx/ingress-nginx --wait

      - name: Install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager --set installCRDs=true --wait

      - name: Install application
        run: |
          export LB_IP=$(kubectl get svc nginx-ingress-nginx-controller --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
          helm upgrade --install \
          --set "postgresql.host=${{ steps.get-database-ip.outputs.DATABASE_IP }}" \
          --set "postgresql.db=${{ secrets.POSTGRES_DB }}" \
          --set "postgresql.user=${{ secrets.POSTGRES_USER }}" \
          --set "postgresql.password=${{ secrets.POSTGRES_PASSWORD }}" \
          --set "ingress.hosts[0].host=$LB_IP.nip.io" \
          --set "ingress.hosts[0].paths[0].path=/" \
          --set "ingress.hosts[0].paths[0].pathType=ImplementationSpecific" \
          --set "ingress.tls[0].secretName=$LB_IP" \
          --set "ingress.tls[0].hosts[0]=$LB_IP.nip.io" \
          spacetrouble charts/spacetrouble
